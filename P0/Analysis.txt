TASK0:
--------
Worst-case time-complexity: O(1)
In this question, the first element and the last element is being accessed from the List. In worst case, accessing a list at a particular index is constant time.


TASK1:
--------
Worst-case time-complexity: O(n)
There are two for loops which iterate over the list once- O(2n). In Big-O notation time-complexity would be O(n).


TASK2:
--------
Worst-case time-complexity: O(n)
There are two for loops; one iterating over the list once and other once over the dictionary - O(2n). Hence time-complexity would be O(n).


TASK3:
---------
Worst-case time-complexity: O(nlogn)
In worst-case scenario, area code is computed and  startwith function would be in constant time.
Sorting would take O(nlogn).
Hence, O(nlogn) in worst case scenario.


TASK4:
---------
Worst-case time-complexity: O(nlogn)
In worst-case Difference of sets; telemarketer_numbers = all_caller - other_numbers, would take O(len(all_caller)) i.e O(n)
Sorting would take - O(nlogn)
Hence, O(nlogn)
